--- lib/rwsem-spinlock.c.orig       2004-09-09 19:34:21.000000000 -0400
+++ lib/rwsem-spinlock.c    2004-09-09 19:35:56.000000000 -0400
@@ -32,7 +32,7 @@
 /*
  * initialise the semaphore
  */
-void init_rwsem(struct rw_semaphore *sem)
+void fastcall init_rwsem(struct rw_semaphore *sem)
 {
        sem->activity = 0;
        spin_lock_init(&sem->wait_lock);
@@ -120,7 +120,7 @@
 /*
  * get a read lock on the semaphore
  */
-void __down_read(struct rw_semaphore *sem)
+void fastcall __down_read(struct rw_semaphore *sem)
 {
        struct rwsem_waiter waiter;
        struct task_struct *tsk;
@@ -166,7 +166,7 @@
 /*
  * trylock for reading -- returns 1 if successful, 0 if contention
  */
-int __down_read_trylock(struct rw_semaphore *sem)
+int fastcall __down_read_trylock(struct rw_semaphore *sem)
 {
        int ret = 0;
        rwsemtrace(sem,"Entering __down_read_trylock");
@@ -189,7 +189,7 @@
  * get a write lock on the semaphore
  * - note that we increment the waiting count anyway to indicate an exclusive lock
  */
-void __down_write(struct rw_semaphore *sem)
+void fastcall __down_write(struct rw_semaphore *sem)
 {
        struct rwsem_waiter waiter;
        struct task_struct *tsk;
@@ -235,7 +235,7 @@
 /*
  * trylock for writing -- returns 1 if successful, 0 if contention
  */
-int __down_write_trylock(struct rw_semaphore *sem)
+int fastcall __down_write_trylock(struct rw_semaphore *sem)
 {
        int ret = 0;
        rwsemtrace(sem,"Entering __down_write_trylock");
@@ -257,7 +257,7 @@
 /*
  * release a read lock on the semaphore
  */
-void __up_read(struct rw_semaphore *sem)
+void fastcall __up_read(struct rw_semaphore *sem)
 {
        rwsemtrace(sem,"Entering __up_read");

@@ -274,7 +274,7 @@
 /*
  * release a write lock on the semaphore
  */
-void __up_write(struct rw_semaphore *sem)
+void fastcall __up_write(struct rw_semaphore *sem)
 {
        rwsemtrace(sem,"Entering __up_write");

